{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"schemaLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"schemaLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [],
			"scriptLines": [
				"source(useSchema: false,",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     entity: '',",
				"     format: 'cdm',",
				"     manifestType: 'manifest',",
				"     manifestName: 'data_factory_dev',",
				"     entityPath: 'terraform/datalake',",
				"     corpusPath: '',",
				"     corpusStore: 'adlsgen2',",
				"     adlsgen2_fileSystem: 'state',",
				"     folderPath: '',",
				"     fileSystem: 'state') ~> source1",
				"source1 sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     entity: '',",
				"     format: 'cdm',",
				"     manifestType: 'manifest',",
				"     entityPath: 'terraform/datalake',",
				"     manifestName: 'data_factory_dev',",
				"     partitionPath: 'state',",
				"     folderPath: '',",
				"     fileSystem: 'state',",
				"     columnNamesAsHeader: true,",
				"     columnDelimiter: ',',",
				"     quoteChar: '\\\"',",
				"     escapeChar: '\\\\',",
				"     corpusPath: '',",
				"     corpusStore: 'adlsgen2',",
				"     adlsgen2_fileSystem: 'state',",
				"     truncate: true,",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}